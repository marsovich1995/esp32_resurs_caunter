/*#include <Arduino.h>
#include <WiFi.h>
#include <update_time.h>
#include <send_mqtt.h>
#include <TimeLib.h>
#include <NTPClient.h>
#include <WiFiUdp.h>
//struct main{
unsigned long sist=0;
  WiFiUDP ntpUDP;
  NTPClient timeClient(ntpUDP); 

  uint16_t Display_Cold = 0; // литров
  uint16_t Display_Hot  = 0;


  uint16_t Display_E1  = 0; // KWh
  uint16_t Display_E2  = 0;


  uint8_t implus_l = 10; //литров на импульс
  uint16_t kVat_i = 1000; // ипульсов на KW

 //uint16_t btn_caunt  = 0;
//};
struct Button {
  const uint8_t PIN;
  uint32_t numberKeyPresses;
  bool pressed;
};

uint8_t pinElectric = GPIO_NUM_35;
uint8_t pinCold = GPIO_NUM_32;
uint8_t pinHot = GPIO_NUM_34;
uint8_t btn = GPIO_NUM_23;

Button button1 = {btn, 0, false};

unsigned long last_Timp_H =0;
volatile boolean lastImpuls_H = 0; 

unsigned long last_Timp_C =0;
volatile boolean lastImpuls_C = 0; 

unsigned long last_Timp_E =0;
volatile boolean lastImpuls_E = 0; 


volatile boolean Impuls = 0; 

hw_timer_t *timer = NULL; 

volatile boolean timerFlag = 0;
void IRAM_ATTR onTimer(){ // дейсвие по таймеру

}

void IRAM_ATTR pulse_H(){
Impuls =digitalRead(pinHot);
  if ( (millis()-last_Timp_H)>1000 &&  (lastImpuls_H == 0 )) {
 Display_Hot  += 10;
  }
last_Timp_H = millis();
lastImpuls_H = Impuls;
}

void IRAM_ATTR pulse_C(){
Impuls =digitalRead(pinCold);
  if ( (millis()-last_Timp_C)>1000 &&  (lastImpuls_C == 0 )) {
 Display_Cold  += 10;
  }
last_Timp_C = millis();
lastImpuls_C = Impuls;
}

void IRAM_ATTR pulse_E(){
Impuls =digitalRead(pinElectric);
  if ( (millis()-last_Timp_E)>20 &&  (lastImpuls_E == 0 )) {
 Display_E1 ++;
  }
last_Timp_E = millis();
lastImpuls_E = Impuls;
}


void IRAM_ATTR btn_p(){
  button1.numberKeyPresses ++;
  button1.pressed = true;
}

void setup() {
  Serial.begin(115200);
  pinMode(pinElectric, INPUT_PULLUP);
  pinMode(pinHot, INPUT_PULLUP); 
  pinMode(pinCold, INPUT_PULLUP);
  pinMode(btn, INPUT_PULLDOWN);

  attachInterrupt(digitalPinToInterrupt(pinHot),pulse_H, FALLING);
  attachInterrupt(digitalPinToInterrupt(pinCold),pulse_C, FALLING);
  attachInterrupt(digitalPinToInterrupt(pinElectric),pulse_E, FALLING);


  attachInterrupt(digitalPinToInterrupt(btn),btn_p, FALLING);

  /*
  timer = timerBegin(0,80,true);
  timerAttachInterrupt(timer, &onTimer, true);
  timerAlarmWrite(timer,1*1000*1000,true);
  timerAlarmEnable(timer);
*/
//update_time(5);

update_time(5);
}

void loop()
{

}

*/

